// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider     = "mysql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  username      String?   @unique
  password      String?   @db.Text
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
}

model ProductSize {
  id             String          @id @default(cuid())
  size           Size
  availableSizes AvailableSize[]

  @@map("product_sizes")
}

model AvailableSize {
  id            String      @id @default(cuid())
  productId     String
  product       Product     @relation(fields: [productId], references: [id])
  productSizeId String
  productSize   ProductSize @relation(fields: [productSizeId], references: [id])

  @@index([productId])
  @@index([productSizeId])
  @@map("available_sizes")
}

model Product {
  id          String   @id @default(cuid())
  imageKey    String?
  name        String
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  archived    Boolean  @default(false)

  aboutProducts  AboutProduct[]
  orderedItems   OrderItem[]
  availableSizes AvailableSize[]

  @@map("products")
}

model AboutProduct {
  id          String  @id @default(cuid())
  productId   String
  product     Product @relation(fields: [productId], references: [id])
  description String  @db.Text

  @@index([productId])
  @@map("about_products")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  size      Size?

  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}

model Order {
  id        String   @id @default(cuid())
  name      String
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderedItems OrderItem[]

  @@map("orders")
}
